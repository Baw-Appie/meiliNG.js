// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                        @id @default(uuid())

  username              String                        @unique
  name                  String
  emails                Email[]
  phones                Phone[]

  profileUrl            String

  groups                Group[]

  ownedClients          OAuthClient[]
  authorizedClients     OAuthClientAuthorization[]

  auths                 Authorization[]

  isActive              Boolean                       @default(true)
  useTwoFactor          Boolean                       @default(false)
  
  createdAt             DateTime                      @default(now())
  lastSignIn            DateTime                      @default(now())
  lastAuthenticated     DateTime                      @default(now())
}

model Email {
  id                    String                        @id @default(uuid())
  email                 String
  addedAt               DateTime                      @default(now())
  verified              Boolean                       @default(false)
  allowUse              Boolean                       @default(true)
  isPrimary             Boolean                       @default(false)
}

model Phone {
  id                    String                        @id @default(uuid())
  phone                 String
  isPrimary             Boolean                       @default(false)
  addedAt               DateTime                      @default(now())
}

enum AuthorizationMethod {
  PGP_KEY
  OTP
  PASSWORD
  SSH_KEY
  SMS
  EMAIL
  SECURITY_KEY
}

model Authorization {
  id                    String                        @id @default(uuid())
  method                AuthorizationMethod
  data                  Json?
  allowSingleFactor     Boolean                       @default(false)
  allowTwoFactor        Boolean                       @default(false)
  allowPasswordReset    Boolean                       @default(false)
  createdAt             DateTime                      @default(now())
}

model Group {
  id                    String                        @id @default(uuid())
  name                  String
}

model OAuthClient {
  id                    String                        @id @default(uuid())
  name                  String
  image                 String
  secrets               OAuthClientSecrets[]
  accessControls        OAuthClientAccessControls
  redirectUris          OAuthClientRedirectUris[]
  authorizations        OAuthClientAuthorization[]
  privacy               String
  terms                 String
  createdAt             DateTime                      @default(now())
}

model OAuthClientRedirectUris {
  id                    String                        @id @default(uuid())
  redirectUri           String
}

model OAuthClientAccessControls {
  id                    String                        @id @default(uuid())
  userAccessControls    OAuthUserAccessControls?
  permissions           Permission[]
}

model OAuthUserAccessControls {
  id                    String                        @id @default(uuid())
  authorizedUsers       User[]
  authorizedGroups      Group[]
}

model OAuthClientSecrets {
  id                    String                        @id @default(uuid())
  secret                String
  issuer                User
  issuedAt              DateTime                      @default(now())
}

model OAuthClientAuthorization {
  id                    String                        @id @default(uuid())
  user                  User
  client                OAuthClient
  permissions           Permission[]
  authorizedAt          DateTime                      @default(now())
  lastUpdatedAt         DateTime                      @default(now())
}

model Permission {
  name                  String                        @id
  explanation           String?
  accessControls        OAuthClientAccessControls[]
  authorizations        OAuthClientAuthorization[]
}

model Policy {
  id                    String                        @id @default(uuid())
  name                  String
  versions              PolicyVersion[]
  lastUpdatedAt         DateTime                      @default(now())
}

model PolicyVersion {
  id                    String                        @id @default(uuid())
  url                   String
  releasedAt            DateTime                      @default(now())
}

model PolicyConsent {
  id                    String                        @id @default(uuid())
  user                  User
  policy                Policy
  consent               Boolean                       @default(false)
  consentAt             DateTime                      @default(now())
}

enum OAuthTokenType {
  ACCESS_TOKEN
  REFRESH_TOKEN
  ACCOUNT_TOKEN
  AUTHORIZATION_CODE
}

model OAuthToken {
  token                 String                        @id @default(uuid())
  type                  OAuthTokenType
  authorization         OAuthClientAuthorization
  issuedAt              DateTime                      @default(now())
  metadata              Json?
}

model MeilingSessionV1Token {
  token                 String                        @id
  ip                    String                        
  issuedAt              DateTime                      @default(now())
  lastUsed              DateTime                      @default(now())
  expiresAt             DateTime
  session               Json
}
